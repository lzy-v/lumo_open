var e=require("@onflow/fcl-config"),n=require("@onflow/config"),t=require("fs"),r=require("path"),o=require("@onflow/types"),s=require("@onflow/fcl"),c=require("flow-cadut"),a=require("elliptic"),i=require("sha3"),u=require("rlp");function l(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function f(e){if(e&&e.__esModule)return e;var n=Object.create(null);return e&&Object.keys(e).forEach(function(t){if("default"!==t){var r=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(n,t,r.get?r:{enumerable:!0,get:function(){return e[t]}})}}),n.default=e,n}var d=l(t),m=l(r),g=f(o),p=f(s),h=f(u);const P=(e,n,t)=>{if("string"==typeof n)return P(e,n.split("/"),t);if(!n.length)return e;try{const[r,...o]=n;return P(e[r],o,t)}catch(e){return t}},v=(t,r,o,s)=>{let c=P(e.flowConfig(),o,s);c||(c=s),n.config().put(t,c)},M=e=>null==e?null:e.replace(/^0x/,""),A=e=>null==e?null:"0x"+M(e),b=new a.ec("p256"),y=(e,n)=>{const t=b.keyFromPrivate(Buffer.from(e,"hex")).sign((e=>{const n=new i.SHA3(256);return n.update(Buffer.from(e,"hex")),n.digest()})(n)),r=t.r.toArrayLike(Buffer,"be",32),o=t.s.toArrayLike(Buffer,"be",32);return Buffer.concat([r,o]).toString("hex")},w=(e,t=0)=>function(r={}){try{return Promise.resolve(n.config().get("SERVICE_ADDRESS")).then(function(o){return Promise.resolve(n.config().get("PRIVATE_KEY")).then(function(n){return e=M(e||o),{...r,tempId:`${e}-${t}`,addr:p.sansPrefix(e),keyId:t,signingFunction:function(r){try{return Promise.resolve({keyId:t,addr:A(e),signature:y(n,r.message)})}catch(e){return Promise.reject(e)}}}})})}catch(e){return Promise.reject(e)}},k=e=>"object"==typeof e&&null!==e;function x(e,n,t){if(!e.s){if(t instanceof T){if(!t.s)return void(t.o=x.bind(null,e,n));1&n&&(n=t.s),t=t.v}if(t&&t.then)return void t.then(x.bind(null,e,n),x.bind(null,e,2));e.s=n,e.v=t;const r=e.o;r&&r(e)}}const T=function(){function e(){}return e.prototype.then=function(n,t){const r=new e,o=this.s;if(o){const e=1&o?n:t;if(e){try{x(r,1,e(this.v))}catch(e){x(r,2,e)}return r}return this}return this.o=function(e){try{const o=e.v;1&e.s?x(r,1,n?n(o):o):t?x(r,1,t(o)):x(r,2,o)}catch(e){x(r,2,e)}},r},e}(),S=e=>function(n){try{function t(){function e(){return Promise.resolve(se()).then(function(e){function t(){return{code:r,signers:s,args:c,limit:u}}const o={...he,...n,FlowManager:e};r=ge(r,o);const a=function(e,n,t){var o=[];for(var s in e)o.push(s);return function(e,n,t){var r,o,s=-1;return function t(c){try{for(;++s<e.length;)if((c=n(s))&&c.then){if(!((a=c)instanceof T&&1&a.s))return void c.then(t,o||(o=x.bind(null,r=new T,2)));c=c.v}r?x(r,1,c):r=c}catch(e){x(r||(r=new T),2,e)}var a}(),r}(o,function(e){return function(e){return Promise.resolve((0,i[e])(r)).then(function(e){r=e})}(o[e])})}(i);return a&&a.then?a.then(t):t()})}let n;const t=function(){if(!a)return Promise.resolve(pe(r)).then(function(e){n=e});n=he}();return t&&t.then?t.then(e):e()}let r,o,s,c,a,i,u;if(k(n[0])){const[e]=n,{name:t,code:l,args:f,signers:d,transformers:m,limit:g,service:p=!1}=e;if(a=p,!t&&!l)throw Error("Both `name` and `code` are missing. Provide either of them");o=t,r=l,s=d,c=f,i=m||[],u=g}else"script"===e?[o,c,u,i]=n:[o,s,c,u,i]=n;u=u||999;const l=function(){if(o)return Promise.resolve(("script"===e?ye:be)({name:o})).then(function(e){r=e})}();return Promise.resolve(l&&l.then?l.then(t):t())}catch(e){return Promise.reject(e)}},F=function(){try{const e=arguments,n=S("tx");return Promise.resolve(n([].slice.call(e))).then(function({code:e,args:n,signers:t,limit:r}){function o(){return Promise.resolve(p.send(a)).then(function(e){return Promise.resolve(p.tx(e).onceExecuted())})}const s=w(),a=[p.transaction(e),p.payer(s),p.proposer(s),p.limit(r)];if(t){const e=t.map(e=>w(e));a.push(p.authorizations(e))}else a.push(p.authorizations([s]));const i=function(){if(n)return Promise.resolve(c.resolveArguments(n,e)).then(function(e){a.push(p.args(e))})}();return i&&i.then?i.then(o):o()})}catch(e){return Promise.reject(e)}},j=function(){try{const e=arguments,n=S("script");return Promise.resolve(n([].slice.call(e))).then(function({code:e,args:n,limit:t}){function r(){return Promise.resolve(p.send(o)).then(function(e){return p.decode(e)})}const o=[p.script(e),p.limit(t)],s=function(){if(n)return Promise.resolve(c.resolveArguments(n,e)).then(function(e){o.push(p.args(e))})}();return s&&s.then?s.then(r):r()})}catch(e){return Promise.reject(e)}},E="\n  import FlowManager from 0x01\n\ntransaction (_ name: String, pubKey: String, manager: Address) {\n    prepare( admin: AuthAccount) {\n        let newAccount = AuthAccount(payer:admin)\n        newAccount.addPublicKey(pubKey.decodeHex())\n\n        let linkPath = FlowManager.accountManagerPath\n        let accountManager = getAccount(manager)\n                            .getCapability(linkPath)!\n                            .borrow<&FlowManager.Mapper>()!\n        \n        // Create a record in account database\n        let address = newAccount.address\n        accountManager.setAddress(name, address: address)\n    }\n}\n\n",I=function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const t={...n,...e};return c.reportMissingImports(E,t,"createAccount =>"),c.replaceImportAddresses(E,t)})}catch(e){return Promise.reject(e)}},B="\nimport FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        acct.contracts.add(\n           name: name,\n           code: decoded,\n           ##ARGS-LIST##\n        )\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n",C=function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const t={...n,...e};return c.reportMissingImports(B,t,"deployContract =>"),c.replaceImportAddresses(B,t)})}catch(e){return Promise.reject(e)}},R='\n  transaction ( code: String ) {\n    prepare( admin: AuthAccount) {\n        admin.contracts.add(\n           name: "FlowManager",\n           code: code.decodeHex(),\n        )\n   }\n  }\n',O=function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const t={...n,...e};return c.reportMissingImports(R,t,"initManager =>"),c.replaceImportAddresses(R,t)})}catch(e){return Promise.reject(e)}},_='\n  import FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\ntransaction(recipient: Address, amount: UFix64) {\n    let tokenAdmin: &ExampleToken.Administrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.tokenAdmin = signer\n        .borrow<&ExampleToken.Administrator>(from: /storage/exampleTokenAdmin)\n        ?? panic("Signer is not the token admin")\n\n        self.tokenReceiver = getAccount(recipient)\n        .getCapability(/public/exampleTokenReceiver)!\n        .borrow<&{FungibleToken.Receiver}>()\n        ?? panic("Unable to borrow receiver reference")\n    }\n\n    execute {\n        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)\n        let mintedVault <- minter.mintTokens(amount: amount)\n\n        self.tokenReceiver.deposit(from: <-mintedVault)\n\n        destroy minter\n    }\n}\n\n',U=function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const t={...n,...e};return c.reportMissingImports(_,t,"mintTokens =>"),c.replaceImportAddresses(_,t)})}catch(e){return Promise.reject(e)}},$="\n  import FlowManager from 0x01\n\ntransaction(name: String, address: Address) {\n    prepare(signer: AuthAccount){\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = signer\n                                .getCapability(linkPath)!\n                                .borrow<&FlowManager.Mapper>()!\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n",D=function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const t={...n,...e};return c.reportMissingImports($,t,"registerContract =>"),c.replaceImportAddresses($,t)})}catch(e){return Promise.reject(e)}},H="\n  transaction{\n    prepare(acct: AuthAccount){\n        log(acct.address)\n    }\n}\n",L=function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const t={...n,...e};return c.reportMissingImports(H,t,"scratch =>"),c.replaceImportAddresses(H,t)})}catch(e){return Promise.reject(e)}},V="\n  import FlowManager from 0x01\n\ntransaction(offset: UInt64){\n    prepare(signer:AuthAccount){\n        FlowManager.setBlockOffset(offset)\n    }\n}\n\n",q=function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const t={...n,...e};return c.reportMissingImports(V,t,"setBlockOffset =>"),c.replaceImportAddresses(V,t)})}catch(e){return Promise.reject(e)}},G="\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n\n        if acct.contracts.get(name: name) == nil {\n          acct.contracts.add(name: name, code: decoded)\n        } else {\n          acct.contracts.update__experimental(name: name, code: decoded)\n        }\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n",K=function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const t={...n,...e};return c.reportMissingImports(G,t,"updateContract =>"),c.replaceImportAddresses(G,t)})}catch(e){return Promise.reject(e)}};var z={createAccountTemplate:I,createAccount:function(e){try{const{addressMap:n,args:t=[],signers:r=[]}=e;return Promise.resolve(I(n)).then(function(n){return c.reportMissing("arguments",t.length,3,"createAccount =>"),c.reportMissing("signers",r.length,1,"createAccount =>"),c.sendTransaction({code:n,...e})})}catch(e){return Promise.reject(e)}},deployContractTemplate:C,deployContract:function(e){try{const{addressMap:n,args:t=[],signers:r=[]}=e;return Promise.resolve(C(n)).then(function(n){return c.reportMissing("arguments",t.length,3,"deployContract =>"),c.reportMissing("signers",r.length,1,"deployContract =>"),c.sendTransaction({code:n,...e})})}catch(e){return Promise.reject(e)}},initManagerTemplate:O,initManager:function(e){try{const{addressMap:n,args:t=[],signers:r=[]}=e;return Promise.resolve(O(n)).then(function(n){return c.reportMissing("arguments",t.length,1,"initManager =>"),c.reportMissing("signers",r.length,1,"initManager =>"),c.sendTransaction({code:n,...e})})}catch(e){return Promise.reject(e)}},mintTokensTemplate:U,mintTokens:function(e){try{const{addressMap:n,args:t=[],signers:r=[]}=e;return Promise.resolve(U(n)).then(function(n){return c.reportMissing("arguments",t.length,2,"mintTokens =>"),c.reportMissing("signers",r.length,1,"mintTokens =>"),c.sendTransaction({code:n,...e})})}catch(e){return Promise.reject(e)}},registerContractTemplate:D,registerContract:function(e){try{const{addressMap:n,args:t=[],signers:r=[]}=e;return Promise.resolve(D(n)).then(function(n){return c.reportMissing("arguments",t.length,2,"registerContract =>"),c.reportMissing("signers",r.length,1,"registerContract =>"),c.sendTransaction({code:n,...e})})}catch(e){return Promise.reject(e)}},scratchTemplate:L,scratch:function(e){try{const{addressMap:n,args:t=[],signers:r=[]}=e;return Promise.resolve(L(n)).then(function(n){return c.reportMissing("arguments",t.length,0,"scratch =>"),c.reportMissing("signers",r.length,1,"scratch =>"),c.sendTransaction({code:n,...e})})}catch(e){return Promise.reject(e)}},setBlockOffsetTemplate:q,setBlockOffset:function(e){try{const{addressMap:n,args:t=[],signers:r=[]}=e;return Promise.resolve(q(n)).then(function(n){return c.reportMissing("arguments",t.length,1,"setBlockOffset =>"),c.reportMissing("signers",r.length,1,"setBlockOffset =>"),c.sendTransaction({code:n,...e})})}catch(e){return Promise.reject(e)}},updateContractTemplate:K,updateContract:function(e){try{const{addressMap:n,args:t=[],signers:r=[]}=e;return Promise.resolve(K(n)).then(function(n){return c.reportMissing("arguments",t.length,3,"updateContract =>"),c.reportMissing("signers",r.length,1,"updateContract =>"),c.sendTransaction({code:n,...e})})}catch(e){return Promise.reject(e)}}};const{updateContractTemplate:N,deployContractTemplate:Y}=z,W=e=>Buffer.from(e,"utf8").toString("hex"),J=function(e){try{let n,t,r,o,s;if(k(e[0])){const[c]=e,{name:a,to:i,addressMap:u,args:l,update:f}=c;if(!a)throw Error("'name' field is missing");n=a,t=i,o=l,r=u,s=f}else[n,t,r,o,s]=e;return Promise.resolve(se()).then(function(e){const c={...he,FlowManager:e,...r};return{name:n,to:t,args:o,update:s,addressMap:c}})}catch(e){return Promise.reject(e)}},Q=function(e){try{function n(e){return Promise.resolve(se()).then(function(n){const t=W(r),i={FlowManager:n};return Promise.resolve(a?N(i):Y(i)).then(function(a){let i=[o,t,n];return Promise.resolve(c.extractContractParameters(r)).then(function(n){if(s){i=i.concat(s);const e=c.generateSchema(n.args).map(e=>c.splitArgs(e)[0]),t="abcdefghijklmnopqrstuvwxyz";let r=[];for(let n=0;n<e.length;n++)r.push(`${t[n]}: ${e[n]}`);a=(a=a.replace("##ARGS-WITH-TYPES##",`, ${n.args}`)).replace("##ARGS-LIST##",r)}else a=(a=a.replace("##ARGS-WITH-TYPES##","")).replace("##ARGS-LIST##","");return F({code:a,args:i,signers:[e]})})})})}const{to:t,code:r,name:o,args:s,update:a}=e;return Promise.resolve(t?n(t):Promise.resolve(se()).then(n))}catch(e){return Promise.reject(e)}},X='\n  pub contract FlowManager {\n\n    /// Account Manager\n    pub event AccountAdded(address: Address)\n\n    pub struct Mapper {\n        pub let accounts: {String: Address}\n\n        pub fun getAddress(_ name: String): Address? {\n            return self.accounts[name]\n        }\n\n        pub fun setAddress(_ name: String, address: Address){\n            self.accounts[name] = address\n            emit FlowManager.AccountAdded(address: address)\n        }\n\n        init(){\n            self.accounts = {}\n        }\n    }\n\n    pub fun getAccountAddress(_ name: String): Address?{\n        let accountManager = self.account\n            .getCapability(self.accountManagerPath)\n            .borrow<&FlowManager.Mapper>()!\n\n        return accountManager.getAddress(name)\n    }\n\n    pub let defaultAccounts: {Address : String}\n\n    pub fun resolveDefaultAccounts(_ address: Address): Address{\n        let alias = self.defaultAccounts[address]!\n        return self.getAccountAddress(alias)!\n    }\n\n    pub let accountManagerStorage: StoragePath\n    pub let contractManagerStorage: StoragePath\n    pub let accountManagerPath: PublicPath\n    pub let contractManagerPath: PublicPath\n\n    /// Environment Manager\n    pub event BlockOffsetChanged(offset: UInt64)\n\n    pub struct MockBlock {\n        pub let id: [UInt8; 32]\n        pub let height: UInt64\n        pub let view: UInt64\n        pub let timestamp: UFix64\n\n        init(_ id: [UInt8; 32], _ height: UInt64, _ view: UInt64, _ timestamp: UFix64){\n            self.id = id\n            self.height = height\n            self.view = view\n            self.timestamp = timestamp\n        }\n    }\n\n    pub fun setBlockOffset(_ offset: UInt64){\n        self.blockOffset = offset\n        emit FlowManager.BlockOffsetChanged(offset: offset)\n    }\n\n    pub fun getBlockHeight(): UInt64 {\n        var block = getCurrentBlock()\n        return block.height + self.blockOffset\n    }\n\n    pub fun getBlock(): MockBlock {\n        var block =  getCurrentBlock()\n        let mockBlock = MockBlock(block.id, block.height, block.view, block.timestamp);\n        return mockBlock\n    }\n\n    pub var blockOffset: UInt64;\n\n\n    // Initialize contract\n    init(){\n        // Environment defaults\n        self.blockOffset = 0;\n\n        // Account Manager initialization\n        let accountManager = Mapper()\n        let contractManager = Mapper()\n\n        self.defaultAccounts = {\n          0x01: "Alice",\n          0x02: "Bob",\n          0x03: "Charlie",\n          0x04: "Dave",\n          0x05: "Eve"\n        }\n\n        self.accountManagerStorage = /storage/testSuitAccountManager\n        self.contractManagerStorage = /storage/testSuitContractManager\n\n        self.accountManagerPath = /public/testSuitAccountManager\n        self.contractManagerPath = /public/testSuitContractManager\n        \n        // Destroy previously stored values\n        self.account.load<Mapper>(from: self.accountManagerStorage)\n        self.account.load<Mapper>(from: self.contractManagerStorage)\n\n        self.account.save(accountManager, to: self.accountManagerStorage)\n        self.account.save(contractManager, to: self.contractManagerStorage)\n\n        self.account.link<&Mapper>(self.accountManagerPath, target: self.accountManagerStorage)\n        self.account.link<&Mapper>(self.contractManagerPath, target: self.contractManagerStorage)\n    }\n}\n \n',Z="\n  import FlowManager from 0x01\n\npub fun main(){\n    // the body can be empty, cause script will throw error if FlowManager is not\n    // added to service address\n}\n\n",ee="\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.accountManagerPath\n    let accountManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return accountManager.getAddress(name)\n\n}\n",ne='\n  // This script reads the balance field of an account\'s FlowToken Balance\n\nimport FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\npub fun main(account: Address): UFix64 {\n    let acct = getAccount(account)\n    let vaultRef = acct.getCapability(/public/exampleTokenBalance)!.borrow<&ExampleToken.Vault{FungibleToken.Balance}>()\n        ?? panic("Could not borrow Balance reference to the Vault")\n\n    return vaultRef.balance\n}\n',te="\n  import FlowManager from 0x01\n\npub fun main():UInt64 {\n    return FlowManager.blockOffset\n}\n\n",re="\n  import FlowManager from 0x01\n\npub fun main(name: String, managerAccount: Address):Address? {\n    let manager = getAccount(managerAccount)\n    let linkPath = FlowManager.contractManagerPath\n    let contractManager = manager\n                        .getCapability(linkPath)\n                        .borrow<&FlowManager.Mapper>()!\n\n    return contractManager.getAddress(name)\n\n}\n";var oe=z;const se=function(){try{return Promise.resolve(n.config().get("SERVICE_ADDRESS")).then(A)}catch(e){return Promise.reject(e)}},ce=function(){try{return Promise.resolve(se()).then(function(e){return Promise.resolve(function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const t={...n,...e};return c.reportMissingImports(Z,t,"checkManager =>"),c.replaceImportAddresses(Z,t)})}catch(e){return Promise.reject(e)}}({FlowManager:e})).then(function(e){const n=function(n,t){try{var r=Promise.resolve(j({code:e,service:!0})).then(function(){})}catch(e){return t()}return r&&r.then?r.then(void 0,t):r}(0,function(){return Promise.resolve(function(){try{return Promise.resolve(oe.initManagerTemplate()).then(function(e){return Promise.resolve(function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const t={...n,...e};return c.reportMissingImports(X,t,"FlowManager =>"),c.replaceImportAddresses(X,t)})}catch(e){return Promise.reject(e)}}()).then(function(n){const t=W(n);return Promise.resolve(F({code:e,args:[t],service:!0})).then(function(){})})})}catch(e){return Promise.reject(e)}}()).then(function(){})});return n&&n.then?n.then(function(){return se()}):se()})})}catch(e){return Promise.reject(e)}},ae=function(e,n=!1){try{if(n){const n=he[e];if(void 0!==n)return Promise.resolve(n)}return Promise.resolve(ce()).then(function(n){const t={FlowManager:n};let r;const o=function(o,s){try{var a=Promise.resolve(function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const t={...n,...e};return c.reportMissingImports(re,t,"getContractAddress =>"),c.replaceImportAddresses(re,t)})}catch(e){return Promise.reject(e)}}(t)).then(function(t){return Promise.resolve(j({code:t,args:[[e,g.String],[n,g.Address]],service:!0})).then(function(e){r=e})})}catch(e){return s(e)}return a&&a.then?a.then(void 0,s):a}(0,function(e){console.error("failed to get account address:",e)});return o&&o.then?o.then(function(){return r}):r})}catch(e){return Promise.reject(e)}};function ie(e,n,t){if(!e.s){if(t instanceof le){if(!t.s)return void(t.o=ie.bind(null,e,n));1&n&&(n=t.s),t=t.v}if(t&&t.then)return void t.then(ie.bind(null,e,n),ie.bind(null,e,2));e.s=n,e.v=t;const r=e.o;r&&r(e)}}const ue=/(\s*import\s*)([\w\d]+)(\s+from\s*)([\w\d".\\/]+)/g,le=function(){function e(){}return e.prototype.then=function(n,t){const r=new e,o=this.s;if(o){const e=1&o?n:t;if(e){try{ie(r,1,e(this.v))}catch(e){ie(r,2,e)}return r}return this}return this.o=function(e){try{const o=e.v;1&e.s?ie(r,1,n?n(o):o):t?ie(r,1,t(o)):ie(r,2,o)}catch(e){ie(r,2,e)}},r},e}(),fe=e=>e.split(/\s/).map(e=>e.replace(/\s/g,"")).filter(e=>e.length>0&&"import"!==e&&"from"!==e),de=(e,n)=>{const[t,r]=n;return e[t]=r,e},me=e=>e&&0!==e.length?e.split("\n").filter(e=>e.includes("import")).map(fe).reduce(de,{}):{},ge=(e,n,t=!0)=>e.replace(ue,(e,r,o,s,c)=>{const a=t?o:c;return`${r}${o} from ${n instanceof Function?n(a):n[a]}`}),pe=function(e){try{const n={},t=function(e,t,r){var o=[];for(var s in e)o.push(s);return function(e,n,t){var r,o,s=-1;return function t(c){try{for(;++s<e.length;)if((c=n(s))&&c.then){if(!((a=c)instanceof le&&1&a.s))return void c.then(t,o||(o=ie.bind(null,r=new le,2)));c=c.v}r?ie(r,1,c):r=c}catch(e){ie(r||(r=new le),2,e)}var a}(),r}(o,function(e){return function(e){const t=function(){if(!he[e])return Promise.resolve(ae(e)).then(function(t){n[e]=t});n[e]=he[e]}();if(t&&t.then)return t.then(function(){})}(o[e])})}(me(e));return Promise.resolve(t&&t.then?t.then(function(){return n}):n)}catch(e){return Promise.reject(e)}},he={FlowToken:"0x0ae53cb6e3f42a79",FungibleToken:"0xee82856bf20e2aa6",FlowFees:"0xe5a8b7f23e8b548f",FlowStorageFees:"0xf8d6e0586b0a20c7"},Pe={"0xe5a8b7f23e8b548f":"0xe5a8b7f23e8b548f","0xf8d6e0586b0a20c7":"0xf8d6e0586b0a20c7","0x0ae53cb6e3f42a79":"0x0ae53cb6e3f42a79","0xee82856bf20e2aa6":"0xee82856bf20e2aa6"},ve=function(e,t="transactions"){try{return Promise.resolve(n.config().get("BASE_PATH")).then(function(n){let r=n;if(k(n)){const o=n[t];if(o)return m.default.resolve(o,`./${e}.cdc`);r=n.base}return m.default.resolve(r,`./${t}/${e}.cdc`)})}catch(e){return Promise.reject(e)}},Me=(e,n={},t=!1)=>{const r=(e=>d.default.readFileSync(e,"utf8"))(e);return n?ge(r,{...t?Pe:he,...n}):r},Ae=function({name:e,addressMap:n}){try{return Promise.resolve(ve(e,"contracts")).then(function(e){return Me(e,n)})}catch(e){return Promise.reject(e)}},be=function({name:e,addressMap:n}){try{return Promise.resolve(ve(e,"transactions")).then(function(e){return Me(e,n)})}catch(e){return Promise.reject(e)}},ye=function({name:e,addressMap:n}){try{return Promise.resolve(ve(e,"scripts")).then(function(e){return Me(e,n)})}catch(e){return Promise.reject(e)}},we={ExampleToken:he.FlowToken},ke=e=>e[0].toLowerCase()+e.slice(1);function xe(e,n){try{var t=e()}catch(e){return n(e)}return t&&t.then?t.then(void 0,n):t}const{expect:Te}=global,Se=function(e){try{let t;function n(n){return t?n:Promise.resolve(e)}const r=function(){if("function"==typeof e)return t=1,Promise.resolve(e())}();return Promise.resolve(r&&r.then?r.then(n):n(r))}catch(e){return Promise.reject(e)}},{spawn:Fe}=require("child_process");var je=new class{constructor(){this.initialized=!1,this.logging=!1,this.logProcessor=e=>e}setLogging(e){this.logging=e}log(e,n="log"){this.logging&&console[n](e)}extractKeyValue(e){const[n,t]=e.split("=");return t.includes("LOG")?{key:n,value:t.replace('"[1;34m','"[1[34m')}:{key:n,value:t}}parseDataBuffer(e){const n=e.toString().match(/((\w+=\w+)|(\w+=".*?"))/g);return n?n.map(e=>e.replace(/"/g,"")).reduce((e,n)=>{const{key:t,value:r}=this.extractKeyValue(n);return e[t]=r,e},{}):{}}start(e=8080,n=!1){try{const t=this;let r=e-8080+3569;return t.logging=n,t.filters=[],t.process=Fe("flow",["emulator","-v","--http-port",e,"--port",r]),t.logProcessor=e=>e,Promise.resolve(new Promise((e,n)=>{t.process.stdout.on("data",n=>{if(t.filters.length>0){for(let e=0;e<t.filters.length;e++)if(n.includes(`${t.filters[e]}`)){t.log(`LOG: ${n}`);break}}else t.log(`LOG: ${n}`);n.includes("Starting HTTP server")&&(t.log("EMULATOR IS UP! Listening for events!"),t.initialized=!0,e(!0))}),t.process.stderr.on("data",e=>{t.log(`ERROR: ${e}`,"error"),t.initialized=!1,n()}),t.process.on("close",n=>{t.log(`emulator exited with code ${n}`),t.initialized=!1,e(!1)})}))}catch(e){return Promise.reject(e)}}clearFilters(){this.filters=[]}removeFilter(e){this.filters=this.filters(n=>n!==e)}addFilter(e){this.filters.includes(e)||this.filters.push(e)}stop(){try{const e=this;return Promise.resolve(new Promise(n=>{e.process.kill(),setTimeout(()=>{e.initialized=!1,n(!1)},50)}))}catch(e){return Promise.reject(e)}}};exports.builtInMethods=function(e){try{function n(){return t.replace(/getCurrentBlock\(\).height/g,"FlowManager.getBlockHeight()")}let t=e;const r=function(){if(!((e,n)=>new RegExp("import\\s+FlowManager").test(n))(0,e))return Promise.resolve(function(){try{return Promise.resolve(se()).then(function(e){return`import FlowManager from ${e}`})}catch(e){return Promise.reject(e)}}()).then(function(n){t=`\n      ${n}\n      ${e}  \n  `})}();return Promise.resolve(r&&r.then?r.then(n):n())}catch(e){return Promise.reject(e)}},exports.deployContract=Q,exports.deployContractByName=function(){try{return Promise.resolve(J([].slice.call(arguments))).then(function(e){function n(e){return Promise.resolve(Ae({name:r,addressMap:o})).then(function(n){return Q({to:e,code:n,name:r,args:s,update:c})})}const{to:t,name:r,addressMap:o,args:s,update:c=!1}=e;return t?n(t):Promise.resolve(se()).then(n)})}catch(e){return Promise.reject(e)}},exports.emulator=je,exports.executeScript=j,exports.extractImports=me,exports.getAccountAddress=function(e){try{const t=e||`deployment-account-${(Math.random()*Math.pow(10,8)).toFixed(0)}`;return Promise.resolve(ce()).then(function(e){function r(){const r=function(){if(null===s){const r=xe(function(){return Promise.resolve(oe.createAccountTemplate(o)).then(function(r){return Promise.resolve(function(){try{const e=b.keyFromPrivate,t=Buffer,r=t.from;return Promise.resolve(n.config().get("PRIVATE_KEY")).then(function(n){const o=e.call(b,r.call(t,n,"hex")).getPublic("hex").replace(/^04/,"");return h.encode([Buffer.from(o,"hex"),2,3,1e3]).toString("hex")})}catch(e){return Promise.reject(e)}}()).then(function(n){return Promise.resolve(F({code:r,args:[[t,n,g.String],[e,g.Address]]})).then(function({events:e}){const n=e.find(e=>e.type.includes("AccountAdded"));s=n.data.address})})})},function(e){console.error(e)});if(r&&r.then)return r.then(function(){})}}();return r&&r.then?r.then(function(){return s}):s}const o={FlowManager:e};let s;const a=xe(function(){return Promise.resolve(function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const t={...n,...e};return c.reportMissingImports(ee,t,"getAccountAddress =>"),c.replaceImportAddresses(ee,t)})}catch(e){return Promise.reject(e)}}(o)).then(function(n){return Promise.resolve(j({code:n,args:[[t,g.String],[e,g.Address]],service:!0})).then(function(e){s=e})})},function(e){console.error("failed to get account address:",e)});return a&&a.then?a.then(r):r()})}catch(e){return Promise.reject(e)}},exports.getBlockOffset=function(){try{return Promise.resolve(ce()).then(function(e){return Promise.resolve(function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const t={...n,...e};return c.reportMissingImports(te,t,"getBlockOffset =>"),c.replaceImportAddresses(te,t)})}catch(e){return Promise.reject(e)}}({FlowManager:e})).then(function(e){return j({code:e})})})}catch(e){return Promise.reject(e)}},exports.getConfigValue=function(e){try{return Promise.resolve(n.config().get(e))}catch(e){return Promise.reject(e)}},exports.getContractAddress=ae,exports.getContractCode=Ae,exports.getFlowBalance=function(e){try{return Promise.resolve(function(e){try{return Promise.resolve(function(e={}){try{return Promise.resolve(c.getEnvironment()).then(function(n){const t={...n,...e};return c.reportMissingImports(ne,t,"getBalance =>"),c.replaceImportAddresses(ne,t)})}catch(e){return Promise.reject(e)}}(we)).then(function(n){return n.replace(/(ExampleToken)/gi,n=>"ExampleToken"===n?e:ke(e))})}catch(e){return Promise.reject(e)}}("FlowToken")).then(function(n){const t=ge(n,he);return j({code:t,args:[[e,g.Address]]})})}catch(e){return Promise.reject(e)}},exports.getScriptCode=ye,exports.getServiceAddress=se,exports.getTemplate=Me,exports.getTransactionCode=be,exports.init=function(e,t={}){try{const{port:r=8080}=t,{pkey:o="48a1f554aeebf6bf9fe0d7b5b79d080700b073ee77909973ea0b2f6fbc902"}=t;return v("PRIVATE_KEY",process,"accounts/emulator-account/key",o),v("SERVICE_ADDRESS",process,"accounts/emulator-account/address","f8d6e0586b0a20c7"),v("BASE_PATH",process,"testing/paths",e),n.config().put("accessNode.api",`http://localhost:${r}`),Promise.resolve()}catch(e){return Promise.reject(e)}},exports.mintFlow=function(e,n){try{return Promise.resolve(function(e){try{return Promise.resolve(oe.mintTokensTemplate(we)).then(function(n){return n.replace(/(ExampleToken)/gi,n=>"ExampleToken"===n?e:ke(e))})}catch(e){return Promise.reject(e)}}("FlowToken")).then(function(t){const r=ge(t,he);return F({code:r,args:[[e,g.Address],[n,g.UFix64]]})})}catch(e){return Promise.reject(e)}},exports.promise=Se,exports.replaceImportAddresses=ge,exports.resolveImports=pe,exports.sendTransaction=F,exports.set=v,exports.setBlockOffset=function(e){try{return Promise.resolve(ce()).then(function(n){const t=[e];return Promise.resolve(oe.setBlockOffsetTemplate({FlowManager:n})).then(function(e){return F({code:e,args:t,payer:[n]})})})}catch(e){return Promise.reject(e)}},exports.shallPass=function(e){try{const n=Se(e);return Promise.resolve(Te(n).resolves.not.toBe(null)).then(function(){return Promise.resolve(Te(n).resolves.not.toThrow()).then(function(){return n.then(({status:e,errorMessage:n})=>{Te(e).toBe(4),Te(n).toBe("")}),n})})}catch(e){return Promise.reject(e)}},exports.shallResolve=function(e){try{const n=Se(e);return Promise.resolve(Te(n).resolves.not.toThrow()).then(function(){return n})}catch(e){return Promise.reject(e)}},exports.shallRevert=function(e){try{const n=Se(e);return Promise.resolve(Te(n).rejects.not.toBe(null)).then(function(){})}catch(e){return Promise.reject(e)}},exports.shallThrow=function(e){try{const n=Se(e);return Promise.resolve(Te(n).rejects.not.toBe(null)).then(function(){return Promise.resolve(Te(n).rejects.toThrow()).then(function(){})})}catch(e){return Promise.reject(e)}};
//# sourceMappingURL=index.js.map
